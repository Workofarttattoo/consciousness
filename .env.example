# Sovereign Security Toolkit - Environment Configuration
# Copyright (c) 2025 Joshua Hendricks Cole (DBA: Corporation of Light). All Rights Reserved. PATENT PENDING.

# ==========================================
# SQUARE PAYMENT CONFIGURATION
# ==========================================
# Get these from: https://developer.squareup.com/apps
#
# For TESTING (Sandbox):
# - Use sandbox Application ID: sandbox-sq0idb-XXXXX
# - Use sandbox Access Token: EAAAExxxxxx (sandbox)
#
# For PRODUCTION:
# - Use production Application ID: sq0idp-XXXXX
# - Use production Access Token: EAAAExxxxxx (production)

SQUARE_APPLICATION_ID=sandbox-sq0idb-YOUR_APP_ID_HERE
SQUARE_ACCESS_TOKEN=EAAAEyour-sandbox-access-token-here
SQUARE_LOCATION_ID=LYOUR_LOCATION_ID_HERE

# Set to 'production' when going live
SQUARE_ENVIRONMENT=sandbox

# ==========================================
# EMAIL CONFIGURATION
# ==========================================
# For Gmail (recommended for testing):
# 1. Go to: https://myaccount.google.com/security
# 2. Enable 2-Step Verification
# 3. Create App Password: https://myaccount.google.com/apppasswords
# 4. Use the generated password below (not your regular Gmail password)

EMAIL_SERVICE=gmail
EMAIL_USER=your-business-email@gmail.com
EMAIL_PASSWORD=your-16-char-app-password-here

# Email "from" name
EMAIL_FROM_NAME=Sovereign Security
EMAIL_FROM_ADDRESS=noreply@sovereignsecurity.io

# ==========================================
# SERVER CONFIGURATION
# ==========================================
PORT=3000
NODE_ENV=development

# For production deployment, set to your domain:
# PUBLIC_URL=https://red-team-tools.aios.is
PUBLIC_URL=http://localhost:3000

# ==========================================
# DATABASE (Optional - using JSON file by default)
# ==========================================
# If you want to use a real database later, uncomment:
# DATABASE_URL=postgresql://user:password@localhost:5432/sovereign_security
# DATABASE_URL=mongodb://localhost:27017/sovereign_security

# ==========================================
# SECURITY
# ==========================================
# Generate a random secret for session signing:
# Run: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
SESSION_SECRET=generate-a-random-32-byte-hex-string-here

# ==========================================
# WEBHOOK SIGNATURE (For Square webhooks)
# ==========================================
# Get from Square Developer Dashboard > Webhooks
SQUARE_WEBHOOK_SIGNATURE_KEY=your-webhook-signature-key-here

# ==========================================
# LOGGING
# ==========================================
LOG_LEVEL=info
# Options: error, warn, info, debug
